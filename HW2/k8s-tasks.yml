# <https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims>
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-data-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
# <https://kubernetes.io/docs/concepts/workloads/controllers/job/>
apiVersion: batch/v1
kind: Job
metadata:
  name: cs401-sh623-hw2-ml
spec:
  ttlSecondsAfterFinished: 60
  template: # <https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates>
    spec:
      containers:
      - name: cs401-sh623-hw2-ml
        image: hello-world:latest # TODO: Replace with ML container.
        volumeMounts:
        - mountPath: "/ml-data"
          name: ml-data-mnt
      restartPolicy: OnFailure
      # <https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes>
      volumes:
      - name: ml-data-mnt
        persistentVolumeClaim:
          claimName: ml-data-pvc
---
# <https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#writing-a-deployment-spec>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cs401-sh623-hw2-deployment
  labels:
    app: cs401-sh623-hw2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cs401-sh623-hw2
  template:
    metadata:
      labels:
        app: cs401-sh623-hw2
    spec:
      containers:
      - name: cs401-sh623-hw2-rest-server
        image: swaagie/echo-server:latest # TODO: Replace with real server image.
        ports:
        - containerPort: 8080
        # TODO: Mount shared volume.
---
# <https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service>
apiVersion: v1
kind: Service
metadata:
  name: cs401-sh623-hw2-service
spec:
  selector:
    app: cs401-sh623-hw2
  ports:
    - port: 52004
      targetPort: 8080
